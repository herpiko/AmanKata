<!doctype html>

<html>
  
  <head>
    <title>Register AmanKata</title>
    <meta name='viewport' content='width=device-width'>
    <link rel='stylesheet' href='/static/bootstrap.min.css'>
    <script type='text/javascript' src='/static/jquery.min.js'></script>
    <script type='text/javascript' src='/static/bootstrap.min.js'></script>
    <script type='text/javascript' src='/static/socket.io.min.js'></script>
    <script type='text/javascript' src='/static/sha.js'></script>
    <script type='text/javascript' src='/static/bigint.js'></script>
    <style type='text/css'>
      .over-text {
        word-wrap: break-word;
      }
    </style>
  </head>
  
  <body>
    <div class='container'>
      <div class='navbar navbar-default'>
        <div class='container-fluid'>
          <div class='navbar-header'>
            <button type='button' class='navbar-toggle' data-toggle='collapse' data-target='.navbar-collapse'>
              <span class='sr-only'>Toggle navigation</span><span class='icon-bar'></span><span class='icon-bar'></span><span class='icon-bar'></span>
            </button>
            <a href='/' class='navbar-brand'><strong>A</strong>man<strong>K</strong>ata</a>
          </div>
        </div>
      </div>
      <div class='row'>
        <div class='col-md-12'>
          <h1>AmanKata <small>Registration Form</small></h1>
          <p>Tells us your user ID and password, and I will give you your signed certificate that can publicily known and your private key that must not be known by other people but you.</p>
          <form role='form'>
            <div class='form-group'>
              <label for='user_id'>Your User ID</label>
              <input type='email' class='form-control' id='user_id' placeholder='Your User ID'>
            </div>
            <div class='form-group'>
              <label for='password'>Your Password</label>
              <input type='password' class='form-control' id='password' placeholder='Your Password'>
            </div>
            <button type='button' class='btn btn-primary' id='register'>Register</button>
            <br/><br/>
            <div id='success_message' class='well'>
              <strong>Your Registration is Success</strong>
              <br/>
              Here is your certificate data: 
              <br/>User ID:
              <span id='user_id_result' class='over-text'>
              </span>
              <br/>Public RSA (E, N):
              <br/>
              <span id='public_rsa' class='over-text'>
              </span>
              <br/>Public DHE (G, Q, Y):
              <span id='public_dhe' class='over-text'>
              </span>
              <br/>Here is your private key (safe it in the safest place on earth that only you know it) : 
              <div id='private_key' class='over-text'>
              </div>
            </div>
            <!-- Kalau pendaftarannya gagal (SocketIO returnnya null) -->
            <div id='error_message' class='well'>
              <strong>Nope, seems like VeriNice can't do any signation part. Try again later.</strong>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="modal fade" id="pleaseWaitDialog" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
              <h1>Processing...</h1>
          </div>
          <div class="modal-body">
              <div class="progress progress-striped active">
                  <div class="progress-bar" style="width: 100%;"></div>
              </div>
          </div>
        </div>
      </div>
    </div>
  </body>

</html>

<script type='text/javascript'>
  $(document).ready(function() {

    closeMessage();
    
    var socket = io.connect('http://' + document.domain + ':' + location.port);

    var eVeriNice = str2bigInt('10001', 16, 1);
    var nVeriNice = str2bigInt('5E89E95A0DD227CE91F0549A0ECDBAA33676FF252077F5317DAE5B3EA2E16B82D1F30497C9A74CF5F646C1A75C163B5C9D6C88D4BB8732BAF537190D943808A656F2FFD3D46DC0C22F31AD98B2F29910F8DA223ED9C317866CAF2790BEEF0AB4B702CD1B302A567053A5CDBF29E5E4276AEE29B5AC41E1FE54EEC89040C8B213', 16, 1);
    var eRSA = str2bigInt('10001', 16, 1);
    var gDHE = str2bigInt('7FFFFFFF', 16, 1);
    var qDHE = str2bigInt('B037D2867723DC4F0352C2DD3AE53EF685EE197BB8BD63E11FDD32BC33FCA596B6DDCBA89B43EB09CBE1CC0F01E030A735E48FC7B166F99B8CEA2F5320806CB568826319DE68F0A8FE9EC2AEF892A2666197573EC11D794A062D9B11EA4BFD2834CFB4312299E0EE29B2CC81D0666DE5C635B730318F3FB2DF789034BC3DD063', 16, 1);
    
    var generateKey = function(fn) {
      var p, q, n, d, phi;
      do {
          do {
            p = randTruePrime(512);
          } while (equalsInt(mod(p, eRSA), 1));
          do {
            q = randTruePrime(512);
          } while (equals(q, p) || equalsInt(mod(q, eRSA), 1));
          n = mult(p, q);
          phi = mult(addInt(p, -1), addInt(q, -1));
          d = inverseMod(eRSA, phi);
      } while (!d);

      var x, y;
      x = randBigInt(512);
      y = powMod(gDHE, x, qDHE);

      fn(n, d, x, y);
    };

    var verifySign = function(str, sign, fn) {
        var shaObj = new jsSHA(str, 'TEXT');
        var hash = shaObj.getHash('SHA-512', 'HEX').toUpperCase();
        var verify = bigInt2str(powMod(str2bigInt(sign, 16, 1), eVeriNice, nVeriNice), 16);
        fn(hash == verify);
    }

    function closeMessage() {
      $('#success_message').hide();
      $('#error_message').hide();
    }
    
    $('#register').click(function() {
      closeMessage();
      var user_id = $('#user_id').val();
      var password = $('#password').val();
      if (!user_id || !password) return;
      $('#pleaseWaitDialog').modal('show');
      generateKey(function(n, d, x, y) {
        var certificate = {'user_id': user_id, 'public_RSA': {'e': bigInt2str(eRSA, 16), 'n': bigInt2str(n, 16)}, 'public_DHE': {'g': bigInt2str(gDHE, 16), 'q': bigInt2str(qDHE, 16), 'y': bigInt2str(y, 16)}};
        socket.emit('registerUser', {'user_id': user_id, 'password': password, 'user_certificate': certificate}, function(result) {
          if (result) {
            $('#pleaseWaitDialog').modal('hide');
            var str = JSON.stringify(result.certificate);
            verifySign(str, result.sign, function(valid) {
              if (valid) {
                $('#user_id_result').text(result.certificate.user_id);
                $('#public_rsa').text('(' + result.certificate.public_RSA.e + ', ' + result.certificate.public_RSA.n + ')');
                $('#public_dhe').text('(' + result.certificate.public_DHE.g + ', ' + result.certificate.public_DHE.q + ', ' + result.certificate.public_DHE.y + ')');
                $('#private_key').text(bigInt2str(d, 16) + '\n' + bigInt2str(x, 16));
                $('#success_message').show();
                return;
              }
            });
          }
          $('#error_message').show();
        });
      });
    });
  });
</script>